# Copyright (c) 2022, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Reference:
# https://gitlab.com/nvidia/container-images/vulkan/-/blob/master/docker/Dockerfile.ubuntu
# https://github.com/NVIDIA-Omniverse/IsaacSim-dockerfiles
#
# Build the image:
# docker login nvcr.io
# docker build --pull -t \
#   isaac-sim:2022.2.1-ubuntu20.04 \
#   --build-arg ISAACSIM_VERSION=2022.2.1 \
#   --build-arg BASE_DIST=ubuntu20.04 \
#   --build-arg CUDA_VERSION=11.4.2 \
#   --build-arg VULKAN_SDK_VERSION=1.3.224.1 \
#   --file Dockerfile.2022.2.1-ubuntu20.04 .
#
# Run container:
# docker run --name isaac-sim --entrypoint bash -it --gpus all -e "ACCEPT_EULA=Y" --rm --network=host \
#   -v ~/docker/isaac-sim/cache/kit:/isaac-sim/kit/cache/Kit:rw \
#   -v ~/docker/isaac-sim/cache/ov:/root/.cache/ov:rw \
#   -v ~/docker/isaac-sim/cache/pip:/root/.cache/pip:rw \
#   -v ~/docker/isaac-sim/cache/glcache:/root/.cache/nvidia/GLCache:rw \
#   -v ~/docker/isaac-sim/cache/computecache:/root/.nv/ComputeCache:rw \
#   -v ~/docker/isaac-sim/logs:/root/.nvidia-omniverse/logs:rw \
#   -v ~/docker/isaac-sim/data:/root/.local/share/ov/data:rw \
#   -v ~/docker/isaac-sim/documents:/root/Documents:rw \
# 	isaac-sim:2022.2.1-ubuntu20.04 \
# 	./runheadless.native.sh
#
# More info:
# https://developer.nvidia.com/isaac-sim
#
ARG DEBIAN_FRONTEND=noninteractive
ARG BASE_DIST=ubuntu20.04
ARG CUDA_VERSION=11.4.2
ARG ISAACSIM_VERSION=2022.2.1


################################################################################
# system
################################################################################

# Configure environment variables
ARG CUDA_VERSION="12.2.0"
# ARG UBUNTU_VERSION="22.04"


# https://catalog.ngc.nvidia.com/orgs/nvidia/containers/isaac-sim
FROM nvcr.io/nvidia/isaac-sim:${ISAACSIM_VERSION} as isaac-sim

# https://catalog.ngc.nvidia.com/orgs/nvidia/containers/cudagl
FROM quay.io/ulagbulag/openark-vine-desktop:latest-ubuntu as system
USER root

# FROM "nvcr.io/nvidia/cuda:${CUDA_VERSION}-runtime-ubuntu${UBUNTU_VERSION}"

# # #############################################################################################################################
 
RUN apt-get update \
    && wget "http://archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.1f-1ubuntu2_amd64.deb" \
    && dpkg -i libssl1.1_1.1.1f-1ubuntu2_amd64.deb \
    && rm -f libssl1.1_1.1.1f-1ubuntu2_amd64.deb \
    && apt-get -y autoremove \
    && apt-get clean autoclean \
    && rm -rf /var/lib/apt/lists/*

RUN apt-get update && apt-get install -y --no-install-recommends \
    libatomic1 \
    libegl1 \
    libglu1-mesa \
    libgomp1 \
    libsm6 \
    libxi6 \
    libxrandr2 \
    libxt6 \
    libfreetype-dev \
    libfontconfig1 \
    openssl \
    libssl1.1 \
    wget \
    vulkan-tools \
    # vulkan-utils \
&& apt-get -y autoremove \
&& apt-get clean autoclean \
&& rm -rf /var/lib/apt/lists/*

ARG VULKAN_SDK_VERSION=1.3.224.1
# Download the Vulkan SDK and extract the headers, loaders, layers and binary utilities
RUN wget -q --show-progress \
    --progress=bar:force:noscroll \
    https://sdk.lunarg.com/sdk/download/${VULKAN_SDK_VERSION}/linux/vulkansdk-linux-x86_64-${VULKAN_SDK_VERSION}.tar.gz \
    -O /tmp/vulkansdk-linux-x86_64-${VULKAN_SDK_VERSION}.tar.gz \ 
    && echo "Installing Vulkan SDK ${VULKAN_SDK_VERSION}" \
    && mkdir -p /opt/vulkan \
    && tar -xf /tmp/vulkansdk-linux-x86_64-${VULKAN_SDK_VERSION}.tar.gz -C /opt/vulkan \
    && mkdir -p /usr/local/include/ && cp -ra /opt/vulkan/${VULKAN_SDK_VERSION}/x86_64/include/* /usr/local/include/ \
    && mkdir -p /usr/local/lib && cp -ra /opt/vulkan/${VULKAN_SDK_VERSION}/x86_64/lib/* /usr/local/lib/ \
    && cp -a /opt/vulkan/${VULKAN_SDK_VERSION}/x86_64/lib/libVkLayer_*.so /usr/local/lib \
    && mkdir -p /usr/local/share/vulkan/explicit_layer.d \
    && cp /opt/vulkan/${VULKAN_SDK_VERSION}/x86_64/etc/vulkan/explicit_layer.d/VkLayer_*.json /usr/local/share/vulkan/explicit_layer.d \
    && mkdir -p /usr/local/share/vulkan/registry \
    && cp -a /opt/vulkan/${VULKAN_SDK_VERSION}/x86_64/share/vulkan/registry/* /usr/local/share/vulkan/registry \
    && cp -a /opt/vulkan/${VULKAN_SDK_VERSION}/x86_64/bin/* /usr/local/bin \
    && ldconfig \
    && rm /tmp/vulkansdk-linux-x86_64-${VULKAN_SDK_VERSION}.tar.gz && rm -rf /opt/vulkan

# Setup the required capabilities for the container runtime    
ENV NVIDIA_VISIBLE_DEVICES=all NVIDIA_DRIVER_CAPABILITIES=all

# Open ports for live streaming
EXPOSE 47995-48012/udp \
       47995-48012/tcp \
       49000-49007/udp \
       49000-49007/tcp \
       49100/tcp \
       8011/tcp \
       8012/tcp \
       8211/tcp \
       8899/tcp \
       8891/tcp

ENV OMNI_SERVER http://omniverse-content-production.s3-us-west-2.amazonaws.com/Assets/Isaac/2022.2.1
# ENV OMNI_SERVER omniverse://localhost/NVIDIA/Assets/Isaac/2022.1
# ENV OMNI_USER admin
# ENV OMNI_PASS admin
ENV MIN_DRIVER_VERSION 525.60.11


# CONDA INSTALL
RUN apt-get update && apt-get install -y wget && apt-get install -y git && apt-get install -y vim && rm -rf /var/lib/apt/lists/*


# Copy Isaac Sim files
COPY --from=isaac-sim /isaac-sim /isaac-sim
RUN mkdir -p /root/.nvidia-omniverse/config
COPY --from=isaac-sim /root/.nvidia-omniverse/config /root/.nvidia-omniverse/config
COPY --from=isaac-sim /etc/vulkan/icd.d/nvidia_icd.json /etc/vulkan/icd.d/nvidia_icd.json
COPY --from=isaac-sim /etc/vulkan/icd.d/nvidia_icd.json /etc/vulkan/implicit_layer.d/nvidia_layers.json

WORKDIR /isaac-sim

# Add symlink
RUN ln -s exts/omni.isaac.examples/omni/isaac/examples extension_examples

# # Default entrypoint to launch headless with streaming
# ENTRYPOINT /isaac-sim/runheadless.native.sh 
WORKDIR /home
RUN git clone https://github.com/gist-ailab/AILAB-isaac-sim-pick-place.git

######################################################################################################################
# RUN sed -i 's#http://archive.ubuntu.com/ubuntu/#mirror://mirrors.ubuntu.com/mirrors.txt#' /etc/apt/sources.list;

# built-in packages
ENV DEBIAN_FRONTEND noninteractive
RUN apt update \
    && apt install -y --no-install-recommends software-properties-common curl apache2-utils \
    && apt update \
    && apt install -y --no-install-recommends --allow-unauthenticated \
        supervisor nginx sudo net-tools zenity xz-utils \
        dbus-x11 x11-utils alsa-utils \
        mesa-utils libgl1-mesa-dri \
    && apt autoclean -y \
    && apt autoremove -y \
    && rm -rf /var/lib/apt/lists/*
# install debs error if combine together
RUN apt update \
    && apt install -y --no-install-recommends --allow-unauthenticated \
        xvfb x11vnc \
        vim-tiny firefox ttf-wqy-zenhei  \
    && apt autoclean -y \
    && apt autoremove -y \
    && rm -rf /var/lib/apt/lists/*

RUN apt update \
    && apt install -y gpg-agent \
    && curl -LO https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb \
    && (dpkg -i ./google-chrome-stable_current_amd64.deb || apt-get install -fy) \
    && curl -sSL https://dl.google.com/linux/linux_signing_key.pub | apt-key add \
    && rm google-chrome-stable_current_amd64.deb \
    && rm -rf /var/lib/apt/lists/*

RUN apt update \
    && apt install -y --no-install-recommends --allow-unauthenticated \
        lxde gtk2-engines-murrine gnome-themes-standard gtk2-engines-pixbuf gtk2-engines-murrine arc-theme \
    && apt autoclean -y \
    && apt autoremove -y \
    && rm -rf /var/lib/apt/lists/*


# Additional packages require ~600MB
# libreoffice  pinta language-pack-zh-hant language-pack-gnome-zh-hant firefox-locale-zh-hant libreoffice-l10n-zh-tw

# tini to fix subreap
ARG TINI_VERSION=v0.18.0
ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /bin/tini
RUN chmod +x /bin/tini

# ffmpeg
RUN apt update \
    && apt install -y --no-install-recommends --allow-unauthenticated \
        ffmpeg \
    && rm -rf /var/lib/apt/lists/* \
    && mkdir /usr/local/ffmpeg \
    && ln -s /usr/bin/ffmpeg /usr/local/ffmpeg/ffmpeg


# python library
######################################################################################################
RUN wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
ENV PATH="/root/miniconda3/bin:${PATH}"
RUN mkdir /root/.conda && bash Miniconda3-latest-Linux-x86_64.sh -b

RUN conda init bash \
    && . ~/.bashrc \
    && conda env create -f /isaac-sim/environment.yml \
    && conda activate isaac-sim && pip install -r /home/AILAB-isaac-sim-pick-place/requirements.txt \
    && echo "conda activate isaac-sim" >> ~/.bashrc \
    && echo ". /isaac-sim/setup_conda_env.sh" >> ~/.bashrc


# Install core dependencies
RUN apt-get update && apt-get install -y \
    pipewire \
    wmctrl \
    xdotool \
    # Cleanup
    && apt-get clean all
##########################################################################################################

COPY rootfs/usr/local/lib/web/backend/requirements.txt /tmp/
RUN apt-get update \
    && dpkg-query -W -f='${Package}\n' > /tmp/a.txt \
	&& /root/miniconda3/envs/isaac-sim/bin/pip install setuptools wheel && /root/miniconda3/envs/isaac-sim/bin/pip install -r /tmp/requirements.txt \
    && ln -s /root/miniconda3/envs/isaac-sim/bin/python3 /usr/local/bin/python \
    && dpkg-query -W -f='${Package}\n' > /tmp/b.txt \
    && apt-get remove -y `diff --changed-group-format='%>' --unchanged-group-format='' /tmp/a.txt /tmp/b.txt | xargs` \
    && apt-get autoclean -y \
    && apt-get autoremove -y \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf /var/cache/apt/* /tmp/a.txt /tmp/b.txt


################################################################################
# builder
################################################################################
FROM ubuntu:20.04 as builder


RUN sed -i 's#http://archive.ubuntu.com/ubuntu/#mirror://mirrors.ubuntu.com/mirrors.txt#' /etc/apt/sources.list;


RUN apt-get update \
    && apt-get install -y --no-install-recommends curl ca-certificates gnupg patch

# nodejs
RUN curl -sL https://deb.nodesource.com/setup_12.x | bash - \
    && apt-get install -y nodejs

# yarn
RUN curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \
    && echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list \
    && apt-get update \
    && apt-get install -y yarn

# build frontend
COPY web /src/web
RUN cd /src/web \
    && yarn \
    && yarn build
RUN sed -i 's#app/locale/#novnc/app/locale/#' /src/web/dist/static/novnc/app/ui.js


################################################################################
# merge
################################################################################
FROM system
USER root
LABEL maintainer="fcwu.tw@gmail.com"

COPY --from=builder /src/web/dist/ /usr/local/lib/web/frontend/
COPY rootfs /
RUN ln -sf /usr/local/lib/web/frontend/static/websockify /usr/local/lib/web/frontend/static/novnc/utils/websockify && \
	chmod +x /usr/local/lib/web/frontend/static/websockify/run


# # EXPOSE 80
# # WORKDIR /home
# # # ENV HOME=/home/ubuntu \
# # #     SHELL=/bin/bash

# # # HEALTHCHECK --interval=30s --timeout=5s CMD curl --fail http://127.0.0.1:6079/api/health

# # CMD ["/bin/bash"]
# # ENTRYPOINT ["/startup.sh"]



# ################################################################################
# # Configure user-specific environment variables
# ARG USER_GID="2000"
# ARG USER_NAME="user"
# ARG USER_SHELL="zsh"
# ARG USER_SUDO="true"
# ARG USER_UID="2000"

# # Be ready for serving
# # FROM "nvcr.io/nvidia/cuda:${CUDA_VERSION}-runtime-ubuntu${UBUNTU_VERSION}"

# # Load user-specific environment variables
# ARG USER_GID
# ARG USER_NAME
# ARG USER_SHELL
# ARG USER_SUDO
# ARG USER_UID

# # Package Manager Configuration
# ARG DEBIAN_FRONTEND='noninteractive'

# # SystemD Configuration
# ENV container docker
# STOPSIGNAL SIGRTMIN+3

# # Client Configuration
# WORKDIR /root/
# ENTRYPOINT [ "/usr/bin/env" ]
# CMD [ "/usr/bin/firefox" ]

# # Volumes Configuration
# ## home.user
# VOLUME [ "/home/${USER_NAME}" ]

# # Add core repositories
# ADD ./apt/keyrings/* /etc/apt/keyrings/
# ADD ./apt/sources.list.d/*.list /etc/apt/sources.list.d/
# RUN find /etc/apt/keyrings/ -type f -exec sh -c \
#     'cat "{}" | gpg --dearmor --yes -o "/etc/apt/keyrings/$(basename "{}")"' \;

# # Install core dependencies
# Run add-apt-repository ppa:pipewire-debian/pipewire-upstream
# RUN apt-get update && apt-get install -y \
#     apt-transport-https \
#     curl \
#     gpg \
#     libgles2-mesa-dev \
#     libglfw3-dev \
#     libldacbt-abr2 \
#     libldacbt-enc2 \
#     libspa-0.2-bluetooth \
#     mesa-vulkan-drivers \
#     pipewire \
#     pipewire-audio-client-libraries \
#     pipewire-media-session- \
#     pipewire-pulse \
#     pulseaudio-module-bluetooth- \
#     # wireplumber \
#     wmctrl \
#     x11-utils \
#     xdotool \
#     # Cleanup
#     && apt-get clean all \
#     && rm -rf /var/lib/apt/lists/*

# # Install locale dependencies
# RUN apt-get update && apt-get install -y \
#     language-pack-ko \
#     # Set default locale
#     && locale-gen --purge en_US.UTF-8 \
#     && echo -e 'LANG="en_US.UTF-8"\nLANGUAGE="en_US:en"\n' | tee /etc/default/locale \
#     # Cleanup
#     && apt-get clean all \
#     && rm -rf /var/lib/apt/lists/*

# # Install development environment dependencies
# RUN apt-get update && apt-get upgrade && apt-get install -y \
#     crun \
#     fuse-overlayfs \
#     git \
#     kubectl \
#     nano \
#     nvidia-container-toolkit-base \
#     openssh-client \
#     pciutils \
#     # podman-docker \
#     python3 \
#     python3-pip \
#     sudo \
#     "${USER_SHELL}" \
#     vim \
#     wget \
#     zip \
#     # Allow passwordless sudo command
#     && test "x${USER_SUDO}" = "xtrue" \
#     && echo "${USER_NAME} ALL=(ALL) NOPASSWD: ALL" >/etc/sudoers.d/10-wheel \
#     && chmod 440 /etc/sudoers.d/10-wheel \
#     || true \
#     # # Docker (Podman) Configuration
#     # && systemctl enable podman \
#     # && touch /etc/containers/nodocker \
#     # ## chmod containers.conf and adjust storage.conf to enable Fuse storage.
#     # && echo '[storage]' >/etc/containers/storage.conf \
#     # && echo 'driver = "overlay"' >>/etc/containers/storage.conf \
#     # && echo 'runroot = "/run/containers/storage"' >>/etc/containers/storage.conf \
#     # && echo 'graphroot = "/var/lib/containers/storage"' >>/etc/containers/storage.conf \
#     # && echo '[storage.options]' >>/etc/containers/storage.conf \
#     # && echo 'additionalimagestores = [' >>/etc/containers/storage.conf \
#     # && echo '"/var/lib/shared",' >>/etc/containers/storage.conf \
#     # && echo ']' >>/etc/containers/storage.conf \
#     # && echo 'pull_options = {enable_partial_images = "false", use_hard_links = "false", ostree_repos=""}' >>/etc/containers/storage.conf \
#     # && echo '[storage.options.overlay]' >>/etc/containers/storage.conf \
#     # && echo 'mount_program = "/usr/bin/fuse-overlayfs"' >>/etc/containers/storage.conf \
#     # && echo 'mountopt = "nodev,fsync=0"' >>/etc/containers/storage.conf \
#     # && echo '[storage.options.thinpool]' >>/etc/containers/storage.conf \
#     # && mkdir -p \
#     # /var/lib/shared/overlay-images \
#     # /var/lib/shared/overlay-layers \
#     # /var/lib/shared/vfs-images \
#     # /var/lib/shared/vfs-layers \
#     # && touch /var/lib/shared/overlay-images/images.lock \
#     # && touch /var/lib/shared/overlay-layers/layers.lock \
#     # && touch /var/lib/shared/vfs-images/images.lock \
#     # && touch /var/lib/shared/vfs-layers/layers.lock \
#     ## generate a CDI specification that refers to all NVIDIA devices
#     && mkdir -p /etc/cdi/ \
#     && chown -R "${USER_UID}:${USER_GID}" /etc/cdi/ \
#     # Environment Variables Configuration
#     && echo '# local binary path registration' >/etc/profile.d/path-local-bin.sh \
#     && echo 'export PATH=${PATH}:/usr/local/bin' >>/etc/profile.d/path-local-bin.sh \
#     && echo 'export PATH=${PATH}:/opt/bin' >>/etc/profile.d/path-local-bin.sh \
#     && ln -sf /usr/local/bin /opt/bin \
#     && echo '# local library path registration' >/etc/ld.so.conf.d/100-path-local-lib.conf \
#     && echo '/usr/local/lib' >>/etc/ld.so.conf.d/100-path-local-lib.conf \
#     && echo '/usr/local/lib64' >>/etc/ld.so.conf.d/100-path-local-lib.conf \
#     && ldconfig \
#     # Cleanup
#     && apt-get clean all \
#     && rm -rf /var/lib/apt/lists/*

# # Install desktop environment dependencies
# RUN apt-get update && apt-get install -y \
#     blueman \
#     bluez \
#     code \
#     dbus-x11 \
#     file-roller \
#     gnome-bluetooth \
#     ibus-hangul \
#     network-manager \
#     network-manager-gnome \
#     # picom \
#     plank \
#     sqlite \
#     ssh-askpass \
#     thunar thunar-archive-plugin thunar-volman \
#     tumbler \
#     xdg-dbus-proxy \
#     xfce4-appfinder xfce4-notifyd xfce4-panel xfce4-pulseaudio-plugin \
#     xfce4-session xfce4-settings xfce4-terminal \
#     xfconf xfdesktop4 xfwm4 \
#     # Remove confliected repositories
#     && rm /etc/apt/sources.list.d/microsoft.list \
#     # Cleanup
#     && apt-get clean all \
#     && rm -rf /var/lib/apt/lists/*

# # Install internet browsers
# RUN apt-get update && apt-get install -y \
#     firefox \
#     google-chrome-stable \
#     # Cleanup
#     && apt-get clean all \
#     && rm -rf /var/lib/apt/lists/*

# # Install utilities - Custom
# ARG ADDONS_HOME="/opt/openark/vdi/desktop"
# ADD ./addons "${ADDONS_HOME}"
# RUN chmod -R a+x "${ADDONS_HOME}/bin" \
#     && for file in ${ADDONS_HOME}/share/applications/*.desktop; do true \
#     && ln -s "${file}" "/usr/share/applications/$(basename "${file}")" \
#     ; done \
#     && for file in ${ADDONS_HOME}/share/autostart/*.desktop; do true \
#     && ln -s "${file}" "/etc/xdg/autostart/$(basename "${file}")" \
#     ; done

# # # Install utilities - Podman
# # ARG PODMAN_REPO="https://raw.githubusercontent.com/containers/libpod/master/contrib/podmanimage/stable"
# # ADD "${PODMAN_REPO}/containers.conf" /etc/containers/containers.conf
# # ADD "${PODMAN_REPO}/podman-containers.conf" /etc/containers/podman-containers.conf
# # ENV _CONTAINERS_USERNS_CONFIGURED=""
# # RUN chmod 644 \
# #     /etc/containers/containers.conf \
# #     /etc/containers/podman-containers.conf

# # Add firefox preferences
# ADD ./browser/firefox/autoconfig.js /usr/lib64/firefox/defaults/pref/
# ADD ./browser/firefox/firefox.cfg /usr/lib64/firefox/

# # Add read-only shared directory
# RUN mkdir -p /opt/public/ \
#     && chown -R "${USER_UID}:${USER_GID}" /opt/public/

# # Add scripts
# ADD ./scripts /opt/scripts/
# RUN chmod 0555 /opt/scripts/*

# # Add a user
# # RUN ldconfig \e
# #     && groupadd -g "${USER_GID}" -o "${USER_NAME}" \
# #     && useradd -u "${USER_UID}" -g "${USER_GID}" -G "audio,cdrom,input,pulse,render,video" \
# #     -s "/bin/${USER_SHELL}" -m -o "${USER_NAME}" \
# #     && echo -e "${USER_UID}:2001:63535" > /etc/subuid \
# #     && echo -e "${USER_GID}:2001:63535" > /etc/subgid
# # USER "${USER_NAME}"
# # WORKDIR "/home/${USER_NAME}"

RUN mkdir -p /isaac-sim/kit/cache/Kit
RUN mkdir -p /root/.cache/ov
RUN mkdir -p /root/.cache/pip
RUN mkdir -p /root/.cache/nvidia/GLCache
RUN mkdir -p /root/.nv/ComputeCache
RUN mkdir -p /root/.nvidia-omniverse/logs
RUN mkdir -p /root/.local/share/ov/data
RUN mkdir -p /root/Documents
RUN mkdir -p /root/.Xauthority


RUN ln -sf /usr/lib64/libcuda.so.1 /usr/lib64/libcuda.so
RUN export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib64
CMD [ /isaac-sim/isaac-sim.sh --allow-root ]

RUN echo 'alias code="code --no-sandbox --user-data-dir=/root"' >> /etc/profile.d/aliases
RUN echo 'alias chrome="google-chrome --no-sandbox"' >> /etc/profile.d/aliases
